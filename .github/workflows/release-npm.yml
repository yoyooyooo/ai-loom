name: Release NPM on Tag

on:
  push:
    tags:
      - 'release-v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag 名称 (例如 release-v1.2.3)'
        required: true
        default: 'release-v0.1.1'
      dry_run:
        description: '是否使用 npm publish --dry-run 进行演练'
        required: true
        type: boolean
        default: true

permissions:
  contents: read
  id-token: write

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  check-versions:
    name: Check versions against tag
    runs-on: ubuntu-latest
    steps:
      - name: Resolve tag name
        id: resolve
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          fi
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Version consistency check
        run: node scripts/check-npm-versions.mjs --tag "${TAG_NAME}"

  publish-platforms:
    name: Publish platform subpackages
    needs: check-versions
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            rust_target: ''
            pkg_dir: packages/npm/server-darwin-arm64
            bin_name: ailoom-server
            bin_src: target/release/ailoom-server

          - os: macos-13
            rust_target: x86_64-apple-darwin
            pkg_dir: packages/npm/server-darwin-x64
            bin_name: ailoom-server
            bin_src: target/x86_64-apple-darwin/release/ailoom-server

          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
            apt: sudo apt-get update && sudo apt-get install -y build-essential pkg-config libssl-dev
            pkg_dir: packages/npm/server-linux-x64-gnu
            bin_name: ailoom-server
            bin_src: target/x86_64-unknown-linux-gnu/release/ailoom-server

          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-musl
            apt: sudo apt-get update && sudo apt-get install -y musl-tools
            pkg_dir: packages/npm/server-linux-x64-musl
            bin_name: ailoom-server
            bin_src: target/x86_64-unknown-linux-musl/release/ailoom-server

          - os: ubuntu-latest
            rust_target: aarch64-unknown-linux-gnu
            apt: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
            pkg_dir: packages/npm/server-linux-arm64-gnu
            bin_name: ailoom-server
            bin_src: target/aarch64-unknown-linux-gnu/release/ailoom-server

          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            pkg_dir: packages/npm/server-win32-x64-msvc
            bin_name: ailoom-server.exe
            bin_src: target/x86_64-pc-windows-msvc/release/ailoom-server.exe

    runs-on: ${{ matrix.os }}
    steps:
      - name: Set NPM publish flags (dry-run)
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "NPM_FLAGS=--dry-run" >> $GITHUB_ENV
          fi
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
          scope: '@ai-loom'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # 空字符串在该 Action 内会被忽略
          targets: ${{ matrix.rust_target }}

      - name: Install Linux build deps
        if: runner.os == 'Linux' && matrix.apt
        run: ${{ matrix.apt }}

      - name: Build release binary
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ matrix.rust_target }}" ]; then
            cargo build -p ailoom-server --release --target "${{ matrix.rust_target }}"
          else
            cargo build -p ailoom-server --release
          fi

      - name: Copy binary into subpackage
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ matrix.pkg_dir }}/bin"
          cp "${{ matrix.bin_src }}" "${{ matrix.pkg_dir }}/bin/${{ matrix.bin_name }}"
          chmod +x "${{ matrix.pkg_dir }}/bin/${{ matrix.bin_name }}" || true

      - name: npm whoami / ping (diagnostic)
        shell: bash
        run: |
          (npm whoami && npm ping) || true

      - name: Publish subpackage to npm (OIDC or token)
        working-directory: ${{ matrix.pkg_dir }}
        run: npm publish --provenance --access public ${NPM_FLAGS}

  publish-meta:
    name: Publish meta package ai-loom
    needs: publish-platforms
    runs-on: ubuntu-latest
    steps:
      - name: Set NPM publish flags (dry-run)
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "NPM_FLAGS=--dry-run" >> $GITHUB_ENV
          fi
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Build web assets for meta package
        run: |
          pnpm -C packages/web i
          pnpm -C packages/web build
          rm -rf packages/npm/ai-loom/web
          mkdir -p packages/npm/ai-loom/web
          cp -R packages/web/dist/* packages/npm/ai-loom/web/ 2>/dev/null || true

      - name: npm whoami / ping (diagnostic)
        shell: bash
        run: |
          (npm whoami && npm ping) || true

      - name: Publish ai-loom (OIDC or token)
        working-directory: packages/npm/ai-loom
        run: npm publish --provenance --access public ${NPM_FLAGS}
